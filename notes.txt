 npm run start 
    for node index....

 npm run dev.... 
    for running the nodemon version which will automatically gey refreshed after any change in the code....

if we dont use .js extensions then it will show error so always whenever auto importing is done we have to write .js extension in web.js file ...

__________________________________________________________________________________________________________
__________________________________________________________________________________________________________

for rendering the error page the * method which we use is not working for that we have to use a middleware method...
__________________________________________________________________________________________________________

The reason why router.get('/*', errorController) was not working is that it matches any route that starts with a forward slash (/). However, when you request a non-existent route, Express will first try to match the request against your defined routes, and only if it doesn't find a match will it fall back to the catch-all route (router.get('/*', errorController)).

So in your case, when you request a non-existent route, Express was not matching it against the catch-all route, but rather returning a 404 response directly. By defining a custom error handling middleware using router.use, you are able to catch any errors that occur during the request processing pipeline, regardless of whether they were matched by a route or not.

__________________________________________________________________________________________________________
__________________________________________________________________________________________________________


 this is the modifying package.json for running the nodemon......

 {
  "name": "vegetable_shop_multipage_1",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node index",
    "dev": "nodemon index"
  },
  "author": "mayuk",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.2"
  },
  "devDependencies": {
    "nodemon": "^2.0.20"
  }
}


this is the originally created package.json which have to modify for running the nodemon....

{
  "name": "vegetable_shop_multipage_1",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "mayuk",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.2"
  },
  "devDependencies": {
    "nodemon": "^2.0.20"
  }
}

__________________________________________________________________________________________________________
__________________________________________________________________________________________________________

this all are basic approach to do the same .....

const http = require('http');
const fs = require('fs');
const express = require("express");

const app = express();

app.use(express.urlencoded());

app.use(express.static("public"));

const hostname = '127.0.0.1';
const port = 3000;
const home = fs.readFileSync('./index.html')
const about = fs.readFileSync('./about.html')
const product = fs.readFileSync('./product.html')
const contact = fs.readFileSync('./contact.html')
const gallery = fs.readFileSync('./gallery.html')
const other = fs.readFileSync('./404.html')







app.get("/", (req, res) => {
   res.end(home);
});

app.get("/about", (req, res) => {
   res.end(about);
});


app.get("/product", (req, res) => {
   res.end(product);
});


app.get("/contact", (req, res) => {
   res.end(contact);
});


app.get("/gallery", (req, res) => {
   res.end(gallery);
});

// this is wrong way here user can see error page if he types error in url but out task is to show the error page whenever there is any wrong url ..
// app.get("/error", (req, res) => {
//    res.end(other);
// });

app.get('*', (req, res) => {
   res.end(other)
})


app.listen(port, hostname, () => {
   console.log(`Server running at http://${hostname}:${port}/`);
});



//_____________________________________________________________________________________________________________________________


//this is the pure node method to create custom backend without using any express so here if we want to incluce out css file then we have to incluce the css in the html page.......

// here we are basically doing routing of html pages ...


// const server = http.createServer((req, res) => {

//    url = req.url;

//    res.statusCode = 200;
//    res.setHeader('Content-Type', 'text/html');
//    if (url == '/' || url == '') {
//       res.end(home);
//    }
//    else if (url == '/about') {
//       res.end(about);
//    }
//    else if (url == '/product') {
//       res.end(product);
//    }
//    else if (url == '/contact') {
//       res.end(contact);
//    }
//    else if (url == '/gallery') {
//       res.end(gallery);
//    }
//    else {
//       res.statusCode = 404;
//       // res.end("<h1>404 not found</h1>");
//       res.end(other);
//    }
// });

// server.listen(port, hostname, () => {
//    console.log(`Server running at http://${hostname}:${port}/`);
// });